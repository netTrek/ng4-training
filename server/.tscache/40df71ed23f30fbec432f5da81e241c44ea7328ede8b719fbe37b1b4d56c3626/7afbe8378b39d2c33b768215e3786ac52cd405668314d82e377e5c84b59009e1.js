"use strict";
/**
 * File created by suenlue on 16.11.17.
 * Copyright (c) 2017 by netTrek GmbH & Co. KG
 */
Object.defineProperty(exports, "__esModule", { value: true });
var jsonServer = require("json-server");
var authService_1 = require("./authService");
var server = jsonServer.create();
var router = jsonServer.router('./mock/db.json');
var middlewares = jsonServer.defaults();
// server.get ( '/users/:id', ( req, res, next ) => {
//   next ();
// } );
server.use(jsonServer.bodyParser);
server.post('/login', function (req, res) {
    var _a = req.body, username = _a.username, password = _a.password;
    var success = username === 'netTrek' && password === 'netTrek';
    var authorized = success;
    if (success) {
        res.header('authorization', "Bearer netTrek");
        res.status(200);
    }
    else {
        res.status(401);
    }
    res.json({ success: success, authorized: authorized });
});
router.render = function (req, res, next) {
    console.log('render', next);
    var authorized = false;
    if (req.headers.hasOwnProperty('authorization')) {
        var token = String(req.headers.authorization)
            .replace(/((Bearer)|\s)/gi, '');
        authorized = token === 'netTrek';
    }
    // if ( !authorized ) {
    //   res.status(401).json({ error: 'user is not authorized', authorized: false, success: false  });
    // } else {
    res.header('authorization', "Bearer netTrek");
    res.json({
        data: res.locals.data,
        success: !!res.locals.data && (res.statusCode === 200),
        authorized: authorized
    });
    // }
};
server.use(middlewares);
server.use(router);
server.get('/auth', authService_1.auth);
server.listen(3000, function () {
    console.log('JSON Server is running on port 3000');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3N1ZW5sdWUvV2Vic2l0ZXMvdHJhaW5pbmcvZ2ZuLTIwMTctMTEvZ2ZuL3NlcnZlci9zcmMvc2VydmVyLnRzIiwic291cmNlcyI6WyIvVXNlcnMvc3Vlbmx1ZS9XZWJzaXRlcy90cmFpbmluZy9nZm4tMjAxNy0xMS9nZm4vc2VydmVyL3NyYy9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7QUFFSCx3Q0FBMEM7QUFDMUMsNkNBQXFDO0FBRXJDLElBQU0sTUFBTSxHQUFRLFVBQVUsQ0FBQyxNQUFNLEVBQUcsQ0FBQztBQUN6QyxJQUFNLE1BQU0sR0FBUSxVQUFVLENBQUMsTUFBTSxDQUFHLGdCQUFnQixDQUFFLENBQUM7QUFDM0QsSUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLFFBQVEsRUFBRyxDQUFDO0FBRTNDLHFEQUFxRDtBQUNyRCxhQUFhO0FBQ2IsT0FBTztBQUVQLE1BQU0sQ0FBQyxHQUFHLENBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBRSxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxJQUFJLENBQUcsUUFBUSxFQUFFLFVBQUUsR0FBRyxFQUFFLEdBQUc7SUFDMUIsSUFBQSxhQUFpQyxFQUEvQixzQkFBUSxFQUFFLHNCQUFRLENBQWM7SUFDeEMsSUFBTSxPQUFPLEdBQWtCLFFBQVEsS0FBSyxTQUFTLElBQUksUUFBUSxLQUFLLFNBQVMsQ0FBQztJQUNoRixJQUFNLFVBQVUsR0FBZSxPQUFPLENBQUM7SUFDdkMsRUFBRSxDQUFDLENBQUUsT0FBUSxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxNQUFNLENBQUcsZUFBZSxFQUFFLGdCQUFnQixDQUFFLENBQUM7UUFDakQsR0FBRyxDQUFDLE1BQU0sQ0FBRyxHQUFHLENBQUUsQ0FBQztJQUNyQixDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixHQUFHLENBQUMsTUFBTSxDQUFHLEdBQUcsQ0FBRSxDQUFDO0lBQ3JCLENBQUM7SUFDRCxHQUFHLENBQUMsSUFBSSxDQUFHLEVBQUUsT0FBTyxTQUFBLEVBQUUsVUFBVSxZQUFBLEVBQUUsQ0FBRSxDQUFDO0FBQ3ZDLENBQUMsQ0FBRSxDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sR0FBRyxVQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtJQUM5QixPQUFPLENBQUMsR0FBRyxDQUFHLFFBQVEsRUFBRSxJQUFJLENBQUUsQ0FBQztJQUMvQixJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDdkIsRUFBRSxDQUFDLENBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUcsZUFBZSxDQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JELElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBRTthQUMvQyxPQUFPLENBQUcsaUJBQWlCLEVBQUUsRUFBRSxDQUFFLENBQUM7UUFDckMsVUFBVSxHQUFJLEtBQUssS0FBSyxTQUFTLENBQUM7SUFDcEMsQ0FBQztJQUVELHVCQUF1QjtJQUN2QixtR0FBbUc7SUFDbkcsV0FBVztJQUNYLEdBQUcsQ0FBQyxNQUFNLENBQUcsZUFBZSxFQUFFLGdCQUFnQixDQUFFLENBQUM7SUFDakQsR0FBRyxDQUFDLElBQUksQ0FBRztRQUNULElBQUksRUFBSyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUk7UUFDeEIsT0FBTyxFQUFFLENBQUUsQ0FBRSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFFLEdBQUcsQ0FBQyxVQUFVLEtBQUssR0FBRyxDQUFFO1FBQzFELFVBQVUsWUFBQTtLQUNYLENBQUUsQ0FBQztJQUNKLElBQUk7QUFFTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsR0FBRyxDQUFHLFdBQVcsQ0FBRSxDQUFDO0FBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUcsTUFBTSxDQUFFLENBQUM7QUFFdEIsTUFBTSxDQUFDLEdBQUcsQ0FBRyxPQUFPLEVBQUUsa0JBQUksQ0FBRSxDQUFDO0FBRTdCLE1BQU0sQ0FBQyxNQUFNLENBQUcsSUFBSSxFQUFFO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUcscUNBQXFDLENBQUUsQ0FBQztBQUN4RCxDQUFDLENBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRmlsZSBjcmVhdGVkIGJ5IHN1ZW5sdWUgb24gMTYuMTEuMTcuXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgYnkgbmV0VHJlayBHbWJIICYgQ28uIEtHXG4gKi9cblxuaW1wb3J0ICogYXMganNvblNlcnZlciBmcm9tICdqc29uLXNlcnZlcic7XG5pbXBvcnQgeyBhdXRoIH0gZnJvbSAnLi9hdXRoU2VydmljZSc7XG5cbmNvbnN0IHNlcnZlciAgICAgID0ganNvblNlcnZlci5jcmVhdGUgKCk7XG5jb25zdCByb3V0ZXIgICAgICA9IGpzb25TZXJ2ZXIucm91dGVyICggJy4vbW9jay9kYi5qc29uJyApO1xuY29uc3QgbWlkZGxld2FyZXMgPSBqc29uU2VydmVyLmRlZmF1bHRzICgpO1xuXG4vLyBzZXJ2ZXIuZ2V0ICggJy91c2Vycy86aWQnLCAoIHJlcSwgcmVzLCBuZXh0ICkgPT4ge1xuLy8gICBuZXh0ICgpO1xuLy8gfSApO1xuXG5zZXJ2ZXIudXNlICgganNvblNlcnZlci5ib2R5UGFyc2VyICk7XG5cbnNlcnZlci5wb3N0ICggJy9sb2dpbicsICggcmVxLCByZXMgKSA9PiB7XG4gIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0gPSByZXEuYm9keTtcbiAgY29uc3Qgc3VjY2VzcyAgICAgICAgICAgICAgICA9IHVzZXJuYW1lID09PSAnbmV0VHJlaycgJiYgcGFzc3dvcmQgPT09ICduZXRUcmVrJztcbiAgY29uc3QgYXV0aG9yaXplZCAgICAgICAgICAgICA9IHN1Y2Nlc3M7XG4gIGlmICggc3VjY2VzcyApIHtcbiAgICByZXMuaGVhZGVyICggJ2F1dGhvcml6YXRpb24nLCBgQmVhcmVyIG5ldFRyZWtgICk7XG4gICAgcmVzLnN0YXR1cyAoIDIwMCApO1xuICB9IGVsc2Uge1xuICAgIHJlcy5zdGF0dXMgKCA0MDEgKTtcbiAgfVxuICByZXMuanNvbiAoIHsgc3VjY2VzcywgYXV0aG9yaXplZCB9ICk7XG59ICk7XG5cbnJvdXRlci5yZW5kZXIgPSAoIHJlcSwgcmVzLCBuZXh0ICkgPT4ge1xuICBjb25zb2xlLmxvZyAoICdyZW5kZXInLCBuZXh0ICk7XG4gIGxldCBhdXRob3JpemVkID0gZmFsc2U7XG4gIGlmICggcmVxLmhlYWRlcnMuaGFzT3duUHJvcGVydHkgKCAnYXV0aG9yaXphdGlvbicgKSApIHtcbiAgICBjb25zdCB0b2tlbiA9IFN0cmluZyAoIHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24gKVxuICAgICAgLnJlcGxhY2UgKCAvKChCZWFyZXIpfFxccykvZ2ksICcnICk7XG4gICAgYXV0aG9yaXplZCAgPSB0b2tlbiA9PT0gJ25ldFRyZWsnO1xuICB9XG5cbiAgLy8gaWYgKCAhYXV0aG9yaXplZCApIHtcbiAgLy8gICByZXMuc3RhdHVzKDQwMSkuanNvbih7IGVycm9yOiAndXNlciBpcyBub3QgYXV0aG9yaXplZCcsIGF1dGhvcml6ZWQ6IGZhbHNlLCBzdWNjZXNzOiBmYWxzZSAgfSk7XG4gIC8vIH0gZWxzZSB7XG4gIHJlcy5oZWFkZXIgKCAnYXV0aG9yaXphdGlvbicsIGBCZWFyZXIgbmV0VHJla2AgKTtcbiAgcmVzLmpzb24gKCB7XG4gICAgZGF0YSAgIDogcmVzLmxvY2Fscy5kYXRhLFxuICAgIHN1Y2Nlc3M6ICEgISByZXMubG9jYWxzLmRhdGEgJiYgKCByZXMuc3RhdHVzQ29kZSA9PT0gMjAwICksXG4gICAgYXV0aG9yaXplZFxuICB9ICk7XG4gIC8vIH1cblxufTtcblxuc2VydmVyLnVzZSAoIG1pZGRsZXdhcmVzICk7XG5zZXJ2ZXIudXNlICggcm91dGVyICk7XG5cbnNlcnZlci5nZXQgKCAnL2F1dGgnLCBhdXRoICk7XG5cbnNlcnZlci5saXN0ZW4gKCAzMDAwLCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nICggJ0pTT04gU2VydmVyIGlzIHJ1bm5pbmcgb24gcG9ydCAzMDAwJyApO1xufSApO1xuXG4iXX0=