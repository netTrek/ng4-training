"use strict";
/**
 * File created by suenlue on 16.11.17.
 * Copyright (c) 2017 by netTrek GmbH & Co. KG
 */
Object.defineProperty(exports, "__esModule", { value: true });
var jsonServer = require("json-server");
var server = jsonServer.create();
var router = jsonServer.router('./mock/db.json');
var middlewares = jsonServer.defaults();
// server.get ( '/users/:id', ( req, res, next ) => {
//   next ();
// } );
server.post('/login', function (req, res) {
    var _a = req.body, username = _a.username, password = _a.password;
    var success = username === 'netTrek' && password === 'netTrek';
    var authorized = success;
    if (success) {
        res.header('authorization', "Bearer netTrek");
        res.status(200);
    }
    else {
        res.status(401);
    }
    res.json({ success: success, authorized: authorized });
});
router.render = function (req, res, next) {
    console.log('render', next);
    var authorized = false;
    if (req.headers.hasOwnProperty('authorization')) {
        var token = String(req.headers.authorization).replace(/((Bearer)|\s)/gi, '');
        authorized = token === 'netTrek';
    }
    // if ( !authorized ) {
    //   res.status(401).json({ error: 'user is not authorized', authorized: false, success: false  });
    // } else {
    res.header('authorization', "Bearer netTrek");
    res.json({
        data: res.locals.data,
        success: !!res.locals.data && (res.statusCode === 200),
        authorized: authorized
    });
    // }
};
server.use(middlewares);
server.use(router);
server.listen(3000, function () {
    console.log('JSON Server is running on port 3000');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3N1ZW5sdWUvV2Vic2l0ZXMvdHJhaW5pbmcvZ2ZuLTIwMTctMTEvZ2ZuL3NlcnZlci9zcmMvc2VydmVyLnRzIiwic291cmNlcyI6WyIvVXNlcnMvc3Vlbmx1ZS9XZWJzaXRlcy90cmFpbmluZy9nZm4tMjAxNy0xMS9nZm4vc2VydmVyL3NyYy9zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7QUFFSCx3Q0FBMEM7QUFFMUMsSUFBTSxNQUFNLEdBQVEsVUFBVSxDQUFDLE1BQU0sRUFBRyxDQUFDO0FBQ3pDLElBQU0sTUFBTSxHQUFRLFVBQVUsQ0FBQyxNQUFNLENBQUcsZ0JBQWdCLENBQUUsQ0FBQztBQUMzRCxJQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsUUFBUSxFQUFHLENBQUM7QUFHM0MscURBQXFEO0FBQ3JELGFBQWE7QUFDYixPQUFPO0FBRVAsTUFBTSxDQUFDLElBQUksQ0FBRSxRQUFRLEVBQUUsVUFBRSxHQUFHLEVBQUUsR0FBRztJQUN6QixJQUFBLGFBQWlDLEVBQS9CLHNCQUFRLEVBQUUsc0JBQVEsQ0FBYztJQUN4QyxJQUFNLE9BQU8sR0FBRyxRQUFRLEtBQUssU0FBUyxJQUFJLFFBQVEsS0FBSyxTQUFTLENBQUM7SUFDakUsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDO0lBQzNCLEVBQUUsQ0FBQyxDQUFFLE9BQVEsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBRSxFQUFFLE9BQU8sU0FBQSxFQUFFLFVBQVUsWUFBQSxFQUFFLENBQUUsQ0FBQztBQUN0QyxDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLEdBQUcsVUFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7SUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBRyxRQUFRLEVBQUUsSUFBSSxDQUFFLENBQUM7SUFDL0IsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLEVBQUUsQ0FBQyxDQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBRSxDQUFDLENBQUMsQ0FBQztRQUNsRCxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUUsQ0FBQyxPQUFPLENBQUUsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDbEYsVUFBVSxHQUFHLEtBQUssS0FBSyxTQUFTLENBQUM7SUFDbkMsQ0FBQztJQUVELHVCQUF1QjtJQUN2QixtR0FBbUc7SUFDbkcsV0FBVztJQUNULEdBQUcsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDOUMsR0FBRyxDQUFDLElBQUksQ0FBQztRQUNQLElBQUksRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUk7UUFDckIsT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFFLEdBQUcsQ0FBQyxVQUFVLEtBQUssR0FBRyxDQUFFO1FBQ3hELFVBQVUsWUFBQTtLQUNYLENBQUMsQ0FBQztJQUNMLElBQUk7QUFFTixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsR0FBRyxDQUFHLFdBQVcsQ0FBRSxDQUFDO0FBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUcsTUFBTSxDQUFFLENBQUM7QUFFdEIsTUFBTSxDQUFDLE1BQU0sQ0FBRyxJQUFJLEVBQUU7SUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBRyxxQ0FBcUMsQ0FBRSxDQUFDO0FBQ3hELENBQUMsQ0FBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBGaWxlIGNyZWF0ZWQgYnkgc3Vlbmx1ZSBvbiAxNi4xMS4xNy5cbiAqIENvcHlyaWdodCAoYykgMjAxNyBieSBuZXRUcmVrIEdtYkggJiBDby4gS0dcbiAqL1xuXG5pbXBvcnQgKiBhcyBqc29uU2VydmVyIGZyb20gJ2pzb24tc2VydmVyJztcblxuY29uc3Qgc2VydmVyICAgICAgPSBqc29uU2VydmVyLmNyZWF0ZSAoKTtcbmNvbnN0IHJvdXRlciAgICAgID0ganNvblNlcnZlci5yb3V0ZXIgKCAnLi9tb2NrL2RiLmpzb24nICk7XG5jb25zdCBtaWRkbGV3YXJlcyA9IGpzb25TZXJ2ZXIuZGVmYXVsdHMgKCk7XG5cblxuLy8gc2VydmVyLmdldCAoICcvdXNlcnMvOmlkJywgKCByZXEsIHJlcywgbmV4dCApID0+IHtcbi8vICAgbmV4dCAoKTtcbi8vIH0gKTtcblxuc2VydmVyLnBvc3QoICcvbG9naW4nLCAoIHJlcSwgcmVzICkgPT4ge1xuICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XG4gIGNvbnN0IHN1Y2Nlc3MgPSB1c2VybmFtZSA9PT0gJ25ldFRyZWsnICYmIHBhc3N3b3JkID09PSAnbmV0VHJlayc7XG4gIGNvbnN0IGF1dGhvcml6ZWQgPSBzdWNjZXNzO1xuICBpZiAoIHN1Y2Nlc3MgKSB7XG4gICAgcmVzLmhlYWRlcignYXV0aG9yaXphdGlvbicsIGBCZWFyZXIgbmV0VHJla2ApO1xuICAgIHJlcy5zdGF0dXMoMjAwKTtcbiAgfSBlbHNlIHtcbiAgICByZXMuc3RhdHVzKDQwMSk7XG4gIH1cbiAgcmVzLmpzb24oIHsgc3VjY2VzcywgYXV0aG9yaXplZCB9ICk7XG59KTtcblxucm91dGVyLnJlbmRlciA9IChyZXEsIHJlcywgbmV4dCApID0+IHtcbiAgY29uc29sZS5sb2cgKCAncmVuZGVyJywgbmV4dCApO1xuICBsZXQgYXV0aG9yaXplZCA9IGZhbHNlO1xuICBpZiAoIHJlcS5oZWFkZXJzLmhhc093blByb3BlcnR5KCdhdXRob3JpemF0aW9uJykgKSB7XG4gICAgY29uc3QgdG9rZW4gPSBTdHJpbmcoIHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24gKS5yZXBsYWNlKCAvKChCZWFyZXIpfFxccykvZ2ksICcnKTtcbiAgICBhdXRob3JpemVkID0gdG9rZW4gPT09ICduZXRUcmVrJztcbiAgfVxuXG4gIC8vIGlmICggIWF1dGhvcml6ZWQgKSB7XG4gIC8vICAgcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ3VzZXIgaXMgbm90IGF1dGhvcml6ZWQnLCBhdXRob3JpemVkOiBmYWxzZSwgc3VjY2VzczogZmFsc2UgIH0pO1xuICAvLyB9IGVsc2Uge1xuICAgIHJlcy5oZWFkZXIoJ2F1dGhvcml6YXRpb24nLCBgQmVhcmVyIG5ldFRyZWtgKTtcbiAgICByZXMuanNvbih7XG4gICAgICBkYXRhOiByZXMubG9jYWxzLmRhdGEsXG4gICAgICBzdWNjZXNzOiAhIXJlcy5sb2NhbHMuZGF0YSAmJiAoIHJlcy5zdGF0dXNDb2RlID09PSAyMDAgKSxcbiAgICAgIGF1dGhvcml6ZWRcbiAgICB9KTtcbiAgLy8gfVxuXG59O1xuXG5zZXJ2ZXIudXNlICggbWlkZGxld2FyZXMgKTtcbnNlcnZlci51c2UgKCByb3V0ZXIgKTtcblxuc2VydmVyLmxpc3RlbiAoIDMwMDAsICgpID0+IHtcbiAgY29uc29sZS5sb2cgKCAnSlNPTiBTZXJ2ZXIgaXMgcnVubmluZyBvbiBwb3J0IDMwMDAnICk7XG59ICk7XG5cbiJdfQ==